---
import CircleUserRound from "@lucide/astro/icons/circle-user-round";
const {isLoggedIn} = Astro.locals
---
  <!-- WIP Show profile when user signed in -->
  {
    isLoggedIn && (
      <profile-menu>
        {/* Profile Icon */}
        <button
          id="profile-button"
          class="bg-blue-200 p-2 rounded-full text-blue-800 hover:bg-blue-400 transition-colors duration-200 cursor-pointer"
        >
          <CircleUserRound />
        </button>

        {/* Menu Section */}
        <section id="profile-mask" class="w-full min-h-screen absolute px-4 top-20 right-0 bg-gradient-to-b from-transparent to-neutral-100/25 dark:bg-neutral-800/20 backdrop-blur-sm">
          <ul id="profile-dropdown" class="float-right w-10/12 md:w-1/4 shadow-2xl shadow-neutral-500 dark:shadow-neutral-900 profile-dropdown-container overflow-hidden bg-white dark:bg-neutral-600 text-neutral-800 dark:text-white text-xl rounded-lg relative right-1">
            <li class="menu-profile-item">Actualizar Perfil</li>
            <li id="logout-button" class="menu-profile-item">Cerrar Sesion</li>
          </ul>
        </section>
      </profile-menu>
    )
  }

<script>
  // Adding signout action to profile button
  import { actions } from "astro:actions";
  import gsap from "gsap";

  class profileMenu extends HTMLElement {
    constructor(){
      super();
      const $profileButton = document.querySelector('#profile-button');
      const $logoutButton = document.querySelector('#logout-button');
      const $profileDropdown = document.querySelector('#profile-dropdown');
      const $profileMask = document.querySelector('#profile-mask');

      gsap.set($profileDropdown, { autoAlpha: 0, scale: 0.8, y: -20} );
      gsap.set($profileMask, { autoAlpha: 0});

      // Creating a Gsap Timeline for the animation
      const tl = gsap.timeline({ paused: true, reversed: true});

      // Adding the animation in the profile dropdown
      tl.to($profileDropdown, {
        autoAlpha: 1,
        scale: 1,
        y:0,
        duration: 0.2,
        animation: "power2.out"
      })

      tl.to($profileMask, {
        autoAlpha: 1,
        duration: 0.2,
        animation: "power1.out"
      })

      $profileButton?.addEventListener('click', (event) => {
        event.stopPropagation();
        tl.reversed() ? tl.play() : tl.reverse();
      })

      // Clicking outside the dropdown menu to close.
      document.addEventListener('click', function(event){
        if(!tl.reversed()){
          const isClickInside = $profileDropdown?.contains(event.target as Node);
          const isClickOnButton = $profileButton?.contains(event.target as Node);
          if(!isClickInside && !isClickOnButton) {
            tl.reverse();
          }
        }
      })

      $logoutButton?.addEventListener('click', async () => {
        try {
          await actions.signOutAction();
          window.location.replace('/');
        } catch (error) {
          console.error('Error signing out:', error);
        }
      });
    }
  }
  customElements.define('profile-menu', profileMenu);
</script>

<style scoped>
  @import "tailwindcss";

  .menu-profile-item {
    @apply px-5 py-3 cursor-pointer dark:hover:bg-neutral-700 hover:bg-neutral-100;
    &:not(:last-child) {
      @apply border-b border-neutral-200 dark:border-neutral-700;
    }
  }
</style>